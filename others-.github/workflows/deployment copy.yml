name: Deploy project
# on: [push, workflow_dispatch]
on:
  push:
    branches:
      - main
      - dev
# env:
#   MONGODB_DB_NAME: gha-demo
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        # id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        # if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run lint
        run: npm run lint
  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        # if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run tests
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        # if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build project
        run: npm run build

      # - name: Publish JS filename
      #   id: publish
      #   run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
        # run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: |
          #   dist
          #   package.json
  deploy:
    environment: testing
    env:
        TESTE_USER_EMAIL: ${{ secrets.TESTE_USER_EMAIL }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files

      - name: Output contents
        run: ls

      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"

      - name: Deploy
        run: echo "Deploying ... ${{ env.TESTE_USER_EMAIL }}"
  report:
    needs: [lint, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "Something went wrong"
          echo "${{ toJSON(github) }}"
